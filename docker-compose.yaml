version: '3.7'

services:
  redis:
    image: redis:alpine
    restart: always
    command: redis-server --requirepass your-password
    ports:
      - "6379:6379"
    networks:
      - back-office
  database:
    image: mariadb
    restart: always
    environment:
      MYSQL_USER: admin
      MYSQL_ROOT_PASSWORD: your-root-password
    # ports:
    #   - "3306:3306"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - back-office
  order_service:
    image: order_service
    restart: on-failure
    build:
      dockerfile: ./order/Dockerfile
    environment:
      - DATABASE_URL=mariadb://orders-username:orders-password@database:3306/orders
      - CELERY_BROKER=redis://:your-password@redis:6379/0
    depends_on:
      - database
      - redis
      - jaeger
      - prometheus
      - loki
    ports:
      - "80:80"
    networks:
      - back-office
  payment_service:
    image: payment_service
    restart: on-failure
    build:
      dockerfile: ./payment/Dockerfile
    environment:
      - DATABASE_URL=mariadb://payment-username:payment-password@database:3306/payment
      - CELERY_BROKER=redis://:your-password@redis:6379/0
    depends_on:
      - database
      - redis
      - jaeger
      - prometheus
      - loki
    networks:
      - back-office
  inventory_service:
    image: inventory_service
    build:
      dockerfile: ./inventory/Dockerfile
    restart: on-failure
    environment:
      - DATABASE_URL=mariadb://inventory-username:inventory-password@database:3306/inventory
      - CELERY_BROKER=redis://:your-password@redis:6379/0
    depends_on:
      - database
      - redis
      - jaeger
      - prometheus
      - loki
    networks:
      - back-office
  delivery_service:
    image: delivery_service
    build:
      dockerfile: ./delivery/Dockerfile
    restart: on-failure
    environment:
      - DATABASE_URL=mariadb://delivery-username:delivery-password@database:3306/delivery
      - CELERY_BROKER=redis://:your-password@redis:6379/0
    depends_on:
      - database
      - redis
      - jaeger
      - prometheus
      - loki
    networks:
      - back-office
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"
      - "14250:14250"
    networks:
      - back-office

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.82.0
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: ["--config=/etc/otel-collector-config.yaml"]
    ports:
      - "4317:4317"  # OTLP gRPC port
      - "4318:4318"  # OTLP HTTP port
      - "9464:9464"
    depends_on:
      - jaeger
      - prometheus
      - loki
    networks:
      - back-office

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - back-office
  
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
      - jaeger
      - loki
    networks:
      - back-office
  
  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - back-office

networks:
  back-office:
volumes:
  grafana_data:
